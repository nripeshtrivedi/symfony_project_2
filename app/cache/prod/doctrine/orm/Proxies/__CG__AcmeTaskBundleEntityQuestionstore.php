<?php

namespace Proxies\__CG__\Acme\TaskBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Questionstore extends \Acme\TaskBundle\Entity\Questionstore implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array('q_name' => NULL, 'option_1' => NULL, 'option_2' => NULL, 'option_3' => NULL, 'option_4' => NULL, 'option_5' => NULL, 'option_6' => NULL);



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->q_name, $this->option_1, $this->option_2, $this->option_3, $this->option_4, $this->option_5, $this->option_6);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', array($name));

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'qid', 'q_name', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6');
        }

        return array('__isInitialized__', 'qid');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Questionstore $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->q_name, $this->option_1, $this->option_2, $this->option_3, $this->option_4, $this->option_5, $this->option_6);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getQid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getQid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQid', array());

        return parent::getQid();
    }

    /**
     * {@inheritDoc}
     */
    public function setQName($qName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQName', array($qName));

        return parent::setQName($qName);
    }

    /**
     * {@inheritDoc}
     */
    public function getQName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQName', array());

        return parent::getQName();
    }

    /**
     * {@inheritDoc}
     */
    public function setOption1($option1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption1', array($option1));

        return parent::setOption1($option1);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption1', array());

        return parent::getOption1();
    }

    /**
     * {@inheritDoc}
     */
    public function setOption2($option2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption2', array($option2));

        return parent::setOption2($option2);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption2', array());

        return parent::getOption2();
    }

    /**
     * {@inheritDoc}
     */
    public function setOption3($option3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption3', array($option3));

        return parent::setOption3($option3);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption3', array());

        return parent::getOption3();
    }

    /**
     * {@inheritDoc}
     */
    public function setOption4($option4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption4', array($option4));

        return parent::setOption4($option4);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption4', array());

        return parent::getOption4();
    }

    /**
     * {@inheritDoc}
     */
    public function setOption5($option5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption5', array($option5));

        return parent::setOption5($option5);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption5', array());

        return parent::getOption5();
    }

    /**
     * {@inheritDoc}
     */
    public function setOption6($option6)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOption6', array($option6));

        return parent::setOption6($option6);
    }

    /**
     * {@inheritDoc}
     */
    public function getOption6()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOption6', array());

        return parent::getOption6();
    }

}
