<?php

namespace Proxies\__CG__\Acme\TaskBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Questionaire extends \Acme\TaskBundle\Entity\Questionaire implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array('q_1' => NULL, 'q_2' => NULL, 'q_3' => NULL, 'q_4' => NULL, 'q_5' => NULL, 'q_6' => NULL);



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->q_1, $this->q_2, $this->q_3, $this->q_4, $this->q_5, $this->q_6);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', array($name));

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'sid', 'uid', 'q_1', 'q_2', 'q_3', 'q_4', 'q_5', 'q_6');
        }

        return array('__isInitialized__', 'sid', 'uid');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Questionaire $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->q_1, $this->q_2, $this->q_3, $this->q_4, $this->q_5, $this->q_6);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getSid()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getSid();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSid', array());

        return parent::getSid();
    }

    /**
     * {@inheritDoc}
     */
    public function setQ1($q1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQ1', array($q1));

        return parent::setQ1($q1);
    }

    /**
     * {@inheritDoc}
     */
    public function getQ1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQ1', array());

        return parent::getQ1();
    }

    /**
     * {@inheritDoc}
     */
    public function setQ2($q2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQ2', array($q2));

        return parent::setQ2($q2);
    }

    /**
     * {@inheritDoc}
     */
    public function getQ2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQ2', array());

        return parent::getQ2();
    }

    /**
     * {@inheritDoc}
     */
    public function setQ3($q3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQ3', array($q3));

        return parent::setQ3($q3);
    }

    /**
     * {@inheritDoc}
     */
    public function getQ3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQ3', array());

        return parent::getQ3();
    }

    /**
     * {@inheritDoc}
     */
    public function setQ4($q4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQ4', array($q4));

        return parent::setQ4($q4);
    }

    /**
     * {@inheritDoc}
     */
    public function getQ4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQ4', array());

        return parent::getQ4();
    }

    /**
     * {@inheritDoc}
     */
    public function setQ5($q5)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQ5', array($q5));

        return parent::setQ5($q5);
    }

    /**
     * {@inheritDoc}
     */
    public function getQ5()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQ5', array());

        return parent::getQ5();
    }

    /**
     * {@inheritDoc}
     */
    public function setQ6($q6)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQ6', array($q6));

        return parent::setQ6($q6);
    }

    /**
     * {@inheritDoc}
     */
    public function getQ6()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQ6', array());

        return parent::getQ6();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Acme\TaskBundle\Entity\User $user = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUid($uid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUid', array($uid));

        return parent::setUid($uid);
    }

    /**
     * {@inheritDoc}
     */
    public function getUid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUid', array());

        return parent::getUid();
    }

}
